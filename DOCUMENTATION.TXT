[PROJECT STRUCTURE]
	# TODO, update this, for now just see README.md

[STATE MACHINE NOTES]
	the state machine has..
		two actions : increment, reset  
		four states : queued, running, stopped, concluded. queued and concluded are user-defined, running and stopped are api-defined

    states and transitions
        1. queued
            	when to go to 2? start_search -> search_status = RUNNING
            	when to go to 3? it should be impossible to go to state 3 from 1
            	when to go to 4? it should be impossible to go to state 4 from 1
        2. running
            	when to go to 1? if bad (or no) data is returned from a search results fetch, reset to 1
            	when to go to 3? search_status = STOPPED
            	when to go to 4? it should be impossible to go to state 4 from 2
        3. stopped
		when to go to 1? if bad (or no) data is returned from a search results fetch, reset to 1
		when to go to 2? it should be impossible to go from state 3 to 2
		when to go to 4? if the thresholds set in searches.cfg are met for that search header
        4. concluded
		once entered, never leave this state without manual intervention

[SEARCH ID MANAGEMENT]
	each search id contains three search properties
		1. count
		2. search id
		3. search status
	search id generation
		search ids are generated when a new search is created
		search ids are then stored in the state machine under their header value
	search id management
		search ids are used to check back in on a search that was left to run
		as mentioned, search ids are keyed by their search parser section header
		search ids are updated when a search changes state
			from Running to Stopped
		search ids are stored in the state machine..
		..count and search status are stored in the same structure
	search id destruction
		search ids are destroyed when a search has finished processing
